version: '3.8'

services:
  # NGINX Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: fullstack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - certbot_www:/var/www/certbot:ro
      - certbot_conf:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: fullstack-certbot
    volumes:
      - certbot_www:/var/www/certbot:rw
      - certbot_conf:/etc/letsencrypt:rw
    networks:
      - app_network
    # Run certbot renew every 12 hours
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Main Application (multiple replicas for load balancing)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VITE_SENTRY_DSN: ${VITE_SENTRY_DSN}
        VITE_SENTRY_ORG: ${VITE_SENTRY_ORG}
        VITE_SENTRY_PROJECT: ${VITE_SENTRY_PROJECT}
        VITE_SERVER_URL: ${VITE_SERVER_URL}
        SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}
        DATABASE_URL: ${DATABASE_URL}
        BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
    image: fullstack-start-template:latest
    expose:
      - "3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: ${DATABASE_URL}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      RESEND_API_KEY: ${RESEND_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      VERCEL_API_KEY: ${VERCEL_API_KEY}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - app_data:/app/data:rw
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database with replication support
  postgres:
    image: postgres:16-alpine
    container_name: fullstack-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --data-checksums"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis with persistence and password
  redis:
    image: redis:7-alpine
    container_name: fullstack-redis
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service
  backup:
    image: postgres:16-alpine
    container_name: fullstack-backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: |
      sh -c 'while true; do
        pg_dump -h postgres -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name "backup_*.sql" -mtime +7 -delete
        sleep 86400
      done'
    restart: unless-stopped

volumes:
  app_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  certbot_www:
    driver: local
  certbot_conf:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16